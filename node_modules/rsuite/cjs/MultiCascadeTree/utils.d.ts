import { ItemDataType } from '../@types/common';
export interface ItemType<T = any> extends ItemDataType<T> {
    parent?: ItemType<T>;
}
interface ItemKeys {
    valueKey: string;
    labelKey: string;
    childrenKey: string;
}
declare type MayHasParent<T extends Record<string, unknown>> = T & {
    parent?: MayHasParent<T>;
};
/**
 * Get all parents of a node
 * @param node
 */
export declare const getParents: <T extends Record<string, unknown>>(node: MayHasParent<T>) => MayHasParent<T>[];
/**
 * Check if any child nodes are selected.
 * @param node
 * @param value
 * @param itemKeys
 */
export declare const isSomeChildChecked: <T extends Record<string, unknown>>(node: T, value: T[], itemKeys: Omit<ItemKeys, 'labelKey'>) => any;
/**
 * Check if the parent is selected.
 * @param node
 * @param value
 * @param itemKeys
 */
export declare const isSomeParentChecked: <T extends Record<string, unknown>>(node: MayHasParent<T>, value: T[], itemKeys: Pick<ItemKeys, 'valueKey'>) => any;
export declare const getOtherItemValuesByUnselectChild: <T>(itemNode: ItemType, value: any, itemKeys: Omit<ItemKeys, 'labelKey'>) => T[];
/**
 * Remove the values of all children.
 */
export declare const removeAllChildrenValue: <T>(value: T[], item: ItemType, itemKeys: Omit<ItemKeys, 'labelKey'>) => T[] | undefined;
export {};
